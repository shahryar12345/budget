# Used by Jenkins to deploy services, do NOT build images
# Images are built by Jenkins and stored in the local ash-aff-absops docker registry
# Eventually these images will get pushed to an exposed docker registry we can reference
# internally and externally

version: "3.4"
# All of these base images can also be stored in Nexus to make setup quicker/easier
# services should generally be ordered by priority/dependency
services:
  # setup mssql server and initialize database
  db:
    image: abs-database:${VERSION}
    ports:
      - "${DB_PORT}:1433"
    volumes:
      - mssql-server-linux-data:/var/opt/mssql/
    environment:
      SA_PASSWORD: ${DB_PASS}
      ACCEPT_EULA: "Y"
    healthcheck:
      test: "/opt/mssql-tools/bin/sqlcmd -Usa -P${DB_PASS} -Q SELECT name FROM master.sys.databases WHERE name = N'${DB_NAME}'"
      interval: "120s"
      timeout: "3s"
      start_period: "40s"
      retries: 3
    # requires a flag to convert in non swam mode:
    # IE: docker-compose up --compatibility
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048m # SQL Server RAM should generally be ~19-20% of actual storage space used by the DB

  # perform database migrations / schema updates against mssql database container
  liquibase:
    image: abs-liquibase:${VERSION}
    command: liquibase update
    restart: on-failure
    depends_on:
      - db
    environment:
      LIQUIBASE_HOST: ${DB_HOST}
      LIQUIBASE_PORT: ${DB_PORT}
      LIQUIBASE_DATABASE: ${DB_NAME}
      LIQUIBASE_USERNAME: ${DB_USER}
      LIQUIBASE_PASSWORD: ${DB_PASS}
      LIQUIBASE_DEBUG: ${LIQUIBASE_DEBUG}
      LIQUIBASE_TRACE: ${LIQUIBASE_TRACE}
    deploy:
      resources:
        limits:
          cpus: '0.5'
          #memory: 1024m

  #Ocelot for microservice orchestration, delegation, routing, proxying, loading balancing
  gateway:
    image: abs-gateway:${VERSION}
    ports:
      - "${GATEWAY_PORT}:2020"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:2020" # This port is internal to the docker network ONLY
      DOMAIN_URL: ${DOMAIN_URL} # used to configure CORS
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 200m

  # identity server / LDAP (AD)
  auth:
    image: abs-auth:${VERSION}
    ports:
      - "${AUTH_PORT}:20250"
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:20250" # This port is internal to the docker network ONLY
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 200m      

  # Data Access Layer / API
  api:
    image: abs-api:${VERSION}
    depends_on:
      - db
    ports:
      - "${API_PORT}:20201"
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASS}
      DB_SERVER: ${DB_HOST}
      DB_DATABASE: ${DB_NAME}
      ASPNETCORE_ENVIRONMENT: "Development"
      ENVIRONMENT_NAME: ${ENVIRONMENT_NAME}
      AUTH_PORT: ${AUTH_PORT}
      ASPNETCORE_URLS: "http://+:20201" # This port is internal to the docker network ONLY
    healthcheck:
      test: "curl localhost:20201/swagger"
      interval: "120s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048m

  redis:
    image: redis
    ports:
      - "${REDIS_PORT}:6379"

  processing:
    image: abs-processing:${VERSION}
    depends_on:
      - db
    ports:
      - "${PROCESSING_PORT}:20203"
    environment:
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASS}"
      DB_SERVER: "${DB_HOST}"
      DB_DATABASE: "${DB_NAME}"
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:20203"
    healthcheck:
      test: "curl localhost:20203/swagger"
      interval: "120s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048m

  ads-rest:
    image: ads-rest:${VERSION}
    ports:
      - ${ADS_REST_PORT}:8085
    environment:
      ADS_LDAP_URL: ${ADS_LDAP_URL}
      ADS_LDAP_DN: ${ADS_LDAP_DN}
      ADS_LDAP_PASS: ${ADS_LDAP_PASS}
      ADS_DB_URL: ${ADS_DB_URL}
      ADS_DB_PORT: ${ADS_DB_PORT}
      ADS_DB_SID: ${ADS_DB_SID}
      ADS_DB_USER: ${ADS_DB_USER}
      ADS_DB_PASS: ${ADS_DB_PASS}
    healthcheck:
      test: "curl localhost:8085/adsrest/v1/services"
      interval: "120s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048m
          
  integrator:
    image: abs-integrator:${VERSION}
    restart: on-failure
    ports:
      - "${INTEGRATOR_PORT}:20205"
    depends_on:
      - db
      - api
      - ads-rest
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      ADS_REST_PORT: ${ADS_REST_PORT}
      API_PORT: ${API_PORT}
      ASPNETCORE_ENVIRONMENT: "Development"
      ASPNETCORE_URLS: "http://+:20205"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASS}"
      DB_SERVER: "${DB_HOST}"
      DB_DATABASE: "${DB_NAME}"
      DB_PORT: ${DB_PORT}
      ENVIRONMENT_NAME: ${ENVIRONMENT_NAME}
    healthcheck:
      test: "curl localhost:20205/swagger"
      interval: "120s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 2048m

  # independent static UI server for serving UI
  ui:
    image: abs-ui:${VERSION}
    depends_on:
      - gateway
    ports:
      - "${UI_PORT}:80"
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT}
      VERSION: ${VERSION}
      ENVIRONMENT_NAME: ${ENVIRONMENT_NAME}
    healthcheck:
      test: "curl localhost:80"
      interval: "120s"
      timeout: "3s"
      start_period: "50s"
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500m

# used to persist mssql server data
volumes:
  mssql-server-linux-data: